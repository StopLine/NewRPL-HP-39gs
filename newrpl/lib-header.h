
// DON'T TOUCH THESE, THEY AUTOMATICALLY NAME ALL LIBRARY DATA
#define LIB_ENUM EVAL1(DEFER1(CAT)(CAT(lib,LIBRARY_NUMBER),enum))
#define LIB_CMDS EVAL1(DEFER1(CAT)(CAT(lib,LIBRARY_NUMBER),cmds))
#define LIB_NAMES EVAL1(DEFER1(CAT)(CAT(lib,LIBRARY_NUMBER),names))
#define LIB_HANDLER EVAL1(DEFER1(CAT)(CAT(lib,LIBRARY_NUMBER),_handler))
#define LIB_NUMBEROFCMDS EVAL1(DEFER1(CAT)(CAT(LIB,LIBRARY_NUMBER),_NUMBEROFCMDS))
#define ROMPTR_TABLE    CAT(romptr_table,LIBRARY_NUMBER)


// ***** INTERNAL DECLARATIONS - DO NOT CHANGE! *****



// IF COMMANDS_ONLY_PASS IS DEFINED, WE ARE NOT SUPPOSED TO
// DEFINE ANYTHING OTHER THAN THE COMMANDS ENUM
// SO EVERYTHING ELSE IS CONDITIONAL COMPILATION
#ifdef COMMANDS_ONLY_PASS

// CREATE AN ENUM WITH THE OPCODE NAMES FOR THE switch() DISPATCHER
#define CMD(a,b) a
#define ECMD(a,b,c) a
enum LIB_ENUM { CMD_LIST , LIB_NUMBEROFCMDS };
#undef CMD
#undef ECMD

// CREATE AN ENUM WITH THE OPCODE NAMES FOR THE DISPATCHER
#define CMD(a,b) CMD_##a = MKOPCODE(LIBRARY_NUMBER,a)
#define ECMD(a,b,c) CMD_##a = MKOPCODE(LIBRARY_NUMBER,a)
enum LIB_CMDS { CMD_LIST  };
#undef CMD
#undef ECMD

// AND EXPORT A DECLRATION OF THE LIBRARY HANDLER

extern void LIB_HANDLER();

#else


// AND A LIST OF STRINGS WITH THE NAMES FOR THE COMPILER
#define CMD(a,b) #a
#define ECMD(a,b,c) b
const char * const LIB_NAMES[]= { CMD_LIST };
#undef CMD
#undef ECMD

// AND A LIST WITH THE SYMBOLIC TOKENINFO DATA
#define CMD(a,b) b
#define ECMD(a,b,c) c
const BINT const LIB_TOKENINFO[]={ CMD_LIST };
#undef ECMD
#undef CMD

#endif

// ***** END INTERNAL DECLARATIONS *****


